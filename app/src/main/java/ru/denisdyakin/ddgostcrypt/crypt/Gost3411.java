package ru.denisdyakin.ddgostcrypt.crypt;

/**
 * Created by Denis on 05.05.2015.
 */
/**
 *
 * @author Denis Dyakin
 * To Create object of class Gost3411-12 used public constructor with one parameters:
 * lenght of out hash-function. Gost3411-12 support 256 bit or 512 bit lenght hash.
 * Example:
 * for test example with message:
 * int[] hashOfMessage = new gost3411Object.getHashFromArray(someMessage);
 *
 * if all right when for:
 * int[] someMessage = {
0x32,0x31,0x30,0x39,0x38,0x37,0x36,0x35,
0x34,0x33,0x32,0x31,0x30,0x39,0x38,0x37,
0x36,0x35,0x34,0x33,0x32,0x31,0x30,0x39,
0x38,0x37,0x36,0x35,0x34,0x33,0x32,0x31,
0x30,0x39,0x38,0x37,0x36,0x35,0x34,0x33,
0x32,0x31,0x30,0x39,0x38,0x37,0x36,0x35,
0x34,0x33,0x32,0x31,0x30,0x39,0x38,0x37,
0x36,0x35,0x34,0x33,0x32,0x31,0x30
};
 *must be next vector:
 * for 256:
 * 00-55-7B-E5-E5-84-FD-52-A4-49-B1-6B-02-51-D0-5D-27-F9-4A-B7-6C-BA-A6-DA-89-0B-59-D8-EF-1E-15-9D
 * for 512:
 * 48-6F-64-C1-91-78-79-41-7F-EF-08-2B-33-81-A4-E2-11-C3-24-F0-74-65-4C-38-82-3A-7B-76-F8-30-AD-00-FA-1F-BA-E4-2B-12-85-C0-35-2F-22-75-24-BC-9A-B1-62-54-28-8D-D6-86-3D-CC-D5-B9-F5-4A-1A-D0-54-1B
 */

public class Gost3411 {
    private final int C_64 = 64; // константа

    //инициализационные векторы
    private final int[] _iv;
    private final int[] _n;
    private final int[] _sigma;

    //длина хэшкода
    private final int outLength;

    //Константы подстановки. Нелинейное биективное преобразование множества двоичных векторов
    private final int[] PI_CONST = {
            252, 238, 221,  17, 207, 110,  49,  22, 251, 196,
            250, 218,  35, 197,   4,  77, 233, 119, 240, 219,
            147,  46, 153, 186,  23,  54, 241, 187, 20, 205,
            95, 193, 249,  24, 101,  90, 226,  92, 239,  33,
            129,  28,  60,  66, 139,   1, 142,  79, 5, 132,
            2,   174, 227, 106, 143, 160,   6,  11, 237, 152,
            127, 212, 211,  31, 235,  52,  44,  81, 234, 200,
            72, 171,  242,  42, 104, 162, 253,  58, 206, 204,
            181, 112,  14,  86,   8,  12, 118,  18, 191, 114,
            19,  71, 156, 183,  93, 135,  21, 161, 150,  41,
            16, 123, 154, 199, 243, 145, 120, 111, 157, 158,
            178, 177,  50, 117,  25,  61, 255,  53, 138, 126,
            109,  84, 198, 128, 195, 189,  13,  87, 223, 245,
            36, 169,  62, 168,  67, 201, 215, 121, 214, 246,
            124,  34, 185,   3, 224,  15, 236, 222, 122, 148,
            176, 188, 220, 232,  40,  80,  78,  51,  10,  74,
            167, 151,  96, 115,  30,   0,  98,  68,  26, 184,
            56, 130, 100, 159,  38,  65, 173,  69,  70, 146,
            39,  94,  85,  47, 140, 163, 165, 125, 105, 213,
            149,  59,   7,  88, 179,  64, 134, 172,  29, 247,
            48,  55, 107, 228, 136, 217, 231, 137, 225,  27,
            131,  73,  76,  63, 248, 254, 141,  83, 170, 144,
            202, 216, 133,  97,  32, 113, 103, 164,  45,  43,
            9,  91, 203, 155,  37, 208, 190, 229, 108,  82,
            89, 166, 116, 210, 230, 244, 180, 192, 209, 102,
            175, 194,  57,  75,  99, 182
    };

    //Константы перестановки.
    private final int[] TAU_CONST = {
            0, 8, 16, 24, 32, 40, 48, 56,
            1, 9, 17, 25, 33, 41, 49, 57,
            2, 10, 18, 26, 34, 42, 50, 58,
            3, 11, 19, 27, 35, 43, 51, 59,
            4, 12, 20, 28, 36, 44, 52, 60,
            5, 13, 21, 29, 37, 45, 53, 61,
            6, 14, 22, 30, 38, 46, 54, 62,
            7, 15, 23, 31, 39, 47, 55, 63
    };

    //Константы линейного преобразования множества двоичных векторов.
    private final int[] L_CONST = {
            0x8e, 0x20, 0xfa, 0xa7, 0x2b, 0xa0, 0xb4, 0x70,
            0x47, 0x10, 0x7d, 0xdd, 0x9b, 0x50, 0x5a, 0x38,
            0xad, 0x08, 0xb0, 0xe0, 0xc3, 0x28, 0x2d, 0x1c,
            0xd8, 0x04, 0x58, 0x70, 0xef, 0x14, 0x98, 0x0e,

            0x6c, 0x02, 0x2c, 0x38, 0xf9, 0x0a, 0x4c, 0x07,
            0x36, 0x01, 0x16, 0x1c, 0xf2, 0x05, 0x26, 0x8d,
            0x1b, 0x8e, 0x0b, 0x0e, 0x79, 0x8c, 0x13, 0xc8,
            0x83, 0x47, 0x8b, 0x07, 0xb2, 0x46, 0x87, 0x64,

            0xa0, 0x11, 0xd3, 0x80, 0x81, 0x8e, 0x8f, 0x40,
            0x50, 0x86, 0xe7, 0x40, 0xce, 0x47, 0xc9, 0x20,
            0x28, 0x43, 0xfd, 0x20, 0x67, 0xad, 0xea, 0x10,
            0x14, 0xaf, 0xf0, 0x10, 0xbd, 0xd8, 0x75, 0x08,

            0x0a, 0xd9, 0x78, 0x08, 0xd0, 0x6c, 0xb4, 0x04,
            0x05, 0xe2, 0x3c, 0x04, 0x68, 0x36, 0x5a, 0x02,
            0x8c, 0x71, 0x1e, 0x02, 0x34, 0x1b, 0x2d, 0x01,
            0x46, 0xb6, 0x0f, 0x01, 0x1a, 0x83, 0x98, 0x8e,

            0x90, 0xda, 0xb5, 0x2a, 0x38, 0x7a, 0xe7, 0x6f,
            0x48, 0x6d, 0xd4, 0x15, 0x1c, 0x3d, 0xfd, 0xb9,
            0x24, 0xb8, 0x6a, 0x84, 0x0e, 0x90, 0xf0, 0xd2,
            0x12, 0x5c, 0x35, 0x42, 0x07, 0x48, 0x78, 0x69,

            0x09, 0x2e, 0x94, 0x21, 0x8d, 0x24, 0x3c, 0xba,
            0x8a, 0x17, 0x4a, 0x9e, 0xc8, 0x12, 0x1e, 0x5d,
            0x45, 0x85, 0x25, 0x4f, 0x64, 0x09, 0x0f, 0xa0,
            0xac, 0xcc, 0x9c, 0xa9, 0x32, 0x8a, 0x89, 0x50,

            0x9d, 0x4d, 0xf0, 0x5d, 0x5f, 0x66, 0x14, 0x51,
            0xc0, 0xa8, 0x78, 0xa0, 0xa1, 0x33, 0x0a, 0xa6,
            0x60, 0x54, 0x3c, 0x50, 0xde, 0x97, 0x05, 0x53,
            0x30, 0x2a, 0x1e, 0x28, 0x6f, 0xc5, 0x8c, 0xa7,

            0x18, 0x15, 0x0f, 0x14, 0xb9, 0xec, 0x46, 0xdd,
            0x0c, 0x84, 0x89, 0x0a, 0xd2, 0x76, 0x23, 0xe0,
            0x06, 0x42, 0xca, 0x05, 0x69, 0x3b, 0x9f, 0x70,
            0x03, 0x21, 0x65, 0x8c, 0xba, 0x93, 0xc1, 0x38,

            0x86, 0x27, 0x5d, 0xf0, 0x9c, 0xe8, 0xaa, 0xa8,
            0x43, 0x9d, 0xa0, 0x78, 0x4e, 0x74, 0x55, 0x54,
            0xaf, 0xc0, 0x50, 0x3c, 0x27, 0x3a, 0xa4, 0x2a,
            0xd9, 0x60, 0x28, 0x1e, 0x9d, 0x1d, 0x52, 0x15,

            0xe2, 0x30, 0x14, 0x0f, 0xc0, 0x80, 0x29, 0x84,
            0x71, 0x18, 0x0a, 0x89, 0x60, 0x40, 0x9a, 0x42,
            0xb6, 0x0c, 0x05, 0xca, 0x30, 0x20, 0x4d, 0x21,
            0x5b, 0x06, 0x8c, 0x65, 0x18, 0x10, 0xa8, 0x9e,

            0x45, 0x6c, 0x34, 0x88, 0x7a, 0x38, 0x05, 0xb9,
            0xac, 0x36, 0x1a, 0x44, 0x3d, 0x1c, 0x8c, 0xd2,
            0x56, 0x1b, 0x0d, 0x22, 0x90, 0x0e, 0x46, 0x69,
            0x2b, 0x83, 0x88, 0x11, 0x48, 0x07, 0x23, 0xba,

            0x9b, 0xcf, 0x44, 0x86, 0x24, 0x8d, 0x9f, 0x5d,
            0xc3, 0xe9, 0x22, 0x43, 0x12, 0xc8, 0xc1, 0xa0,
            0xef, 0xfa, 0x11, 0xaf, 0x09, 0x64, 0xee, 0x50,
            0xf9, 0x7d, 0x86, 0xd9, 0x8a, 0x32, 0x77, 0x28,

            0xe4, 0xfa, 0x20, 0x54, 0xa8, 0x0b, 0x32, 0x9c,
            0x72, 0x7d, 0x10, 0x2a, 0x54, 0x8b, 0x19, 0x4e,
            0x39, 0xb0, 0x08, 0x15, 0x2a, 0xcb, 0x82, 0x27,
            0x92, 0x58, 0x04, 0x84, 0x15, 0xeb, 0x41, 0x9d,

            0x49, 0x2c, 0x02, 0x42, 0x84, 0xfb, 0xae, 0xc0,
            0xaa, 0x16, 0x01, 0x21, 0x42, 0xf3, 0x57, 0x60,
            0x55, 0x0b, 0x8e, 0x9e, 0x21, 0xf7, 0xa5, 0x30,
            0xa4, 0x8b, 0x47, 0x4f, 0x9e, 0xf5, 0xdc, 0x18,

            0x70, 0xa6, 0xa5, 0x6e, 0x24, 0x40, 0x59, 0x8e,
            0x38, 0x53, 0xdc, 0x37, 0x12, 0x20, 0xa2, 0x47,
            0x1c, 0xa7, 0x6e, 0x95, 0x09, 0x10, 0x51, 0xad,
            0x0e, 0xdd, 0x37, 0xc4, 0x8a, 0x08, 0xa6, 0xd8,

            0x07, 0xe0, 0x95, 0x62, 0x45, 0x04, 0x53, 0x6c,
            0x8d, 0x70, 0xc4, 0x31, 0xac, 0x02, 0xa7, 0x36,
            0xc8, 0x38, 0x62, 0x96, 0x56, 0x01, 0xdd, 0x1b,
            0x64, 0x1c, 0x31, 0x4b, 0x2b, 0x8e, 0xe0, 0x83
    };

    //Итерационные константы.
    private final int[][] C_CONST = {
            {0xb1, 0x08, 0x5b, 0xda, 0x1e, 0xca, 0xda, 0xe9, 0xeb, 0xcb, 0x2f, 0x81, 0xc0, 0x65, 0x7c, 0x1f,
                    0x2f, 0x6a, 0x76, 0x43, 0x2e, 0x45, 0xd0, 0x16, 0x71, 0x4e, 0xb8, 0x8d, 0x75, 0x85, 0xc4, 0xfc,
                    0x4b, 0x7c, 0xe0, 0x91, 0x92, 0x67, 0x69, 0x01, 0xa2, 0x42, 0x2a, 0x08, 0xa4, 0x60, 0xd3, 0x15,
                    0x05, 0x76, 0x74, 0x36, 0xcc, 0x74, 0x4d, 0x23, 0xdd, 0x80, 0x65, 0x59, 0xf2, 0xa6, 0x45, 0x07},

            {0x6f, 0xa3, 0xb5, 0x8a, 0xa9, 0x9d, 0x2f, 0x1a, 0x4f, 0xe3, 0x9d, 0x46, 0x0f, 0x70, 0xb5, 0xd7,
                    0xf3, 0xfe, 0xea, 0x72, 0x0a, 0x23, 0x2b, 0x98, 0x61, 0xd5, 0x5e, 0x0f, 0x16, 0xb5, 0x01, 0x31,
                    0x9a, 0xb5, 0x17, 0x6b, 0x12, 0xd6, 0x99, 0x58, 0x5c, 0xb5, 0x61, 0xc2, 0xdb, 0x0a, 0xa7, 0xca,
                    0x55, 0xdd, 0xa2, 0x1b, 0xd7, 0xcb, 0xcd, 0x56, 0xe6, 0x79, 0x04, 0x70, 0x21, 0xb1, 0x9b, 0xb7},

            {0xf5, 0x74, 0xdc, 0xac, 0x2b, 0xce, 0x2f, 0xc7, 0x0a, 0x39, 0xfc, 0x28, 0x6a, 0x3d, 0x84, 0x35,
                    0x06, 0xf1, 0x5e, 0x5f, 0x52, 0x9c, 0x1f, 0x8b, 0xf2, 0xea, 0x75, 0x14, 0xb1, 0x29, 0x7b, 0x7b,
                    0xd3, 0xe2, 0x0f, 0xe4, 0x90, 0x35, 0x9e, 0xb1, 0xc1, 0xc9, 0x3a, 0x37, 0x60, 0x62, 0xdb, 0x09,
                    0xc2, 0xb6, 0xf4, 0x43, 0x86, 0x7a, 0xdb, 0x31, 0x99, 0x1e, 0x96, 0xf5, 0x0a, 0xba, 0x0a, 0xb2},

            {0xef, 0x1f, 0xdf, 0xb3, 0xe8, 0x15, 0x66, 0xd2, 0xf9, 0x48, 0xe1, 0xa0, 0x5d, 0x71, 0xe4, 0xdd,
                    0x48, 0x8e, 0x85, 0x7e, 0x33, 0x5c, 0x3c, 0x7d, 0x9d, 0x72, 0x1c, 0xad, 0x68, 0x5e, 0x35, 0x3f,
                    0xa9, 0xd7, 0x2c, 0x82, 0xed, 0x03, 0xd6, 0x75, 0xd8, 0xb7, 0x13, 0x33, 0x93, 0x52, 0x03, 0xbe,
                    0x34, 0x53, 0xea, 0xa1, 0x93, 0xe8, 0x37, 0xf1, 0x22, 0x0c, 0xbe, 0xbc, 0x84, 0xe3, 0xd1, 0x2e},

            {0x4b, 0xea, 0x6b, 0xac, 0xad, 0x47, 0x47, 0x99, 0x9a, 0x3f, 0x41, 0x0c, 0x6c, 0xa9, 0x23, 0x63,
                    0x7f, 0x15, 0x1c, 0x1f, 0x16, 0x86, 0x10, 0x4a, 0x35, 0x9e, 0x35, 0xd7, 0x80, 0x0f, 0xff, 0xbd,
                    0xbf, 0xcd, 0x17, 0x47, 0x25, 0x3a, 0xf5, 0xa3, 0xdf, 0xff, 0x00, 0xb7, 0x23, 0x27, 0x1a, 0x16,
                    0x7a, 0x56, 0xa2, 0x7e, 0xa9, 0xea, 0x63, 0xf5, 0x60, 0x17, 0x58, 0xfd, 0x7c, 0x6c, 0xfe, 0x57},

            {0xae, 0x4f, 0xae, 0xae, 0x1d, 0x3a, 0xd3, 0xd9, 0x6f, 0xa4, 0xc3, 0x3b, 0x7a, 0x30, 0x39, 0xc0,
                    0x2d, 0x66, 0xc4, 0xf9, 0x51, 0x42, 0xa4, 0x6c, 0x18, 0x7f, 0x9a, 0xb4, 0x9a, 0xf0, 0x8e, 0xc6,
                    0xcf, 0xfa, 0xa6, 0xb7, 0x1c, 0x9a, 0xb7, 0xb4, 0x0a, 0xf2, 0x1f, 0x66, 0xc2, 0xbe, 0xc6, 0xb6,
                    0xbf, 0x71, 0xc5, 0x72, 0x36, 0x90, 0x4f, 0x35, 0xfa, 0x68, 0x40, 0x7a, 0x46, 0x64, 0x7d, 0x6e},

            {0xf4, 0xc7, 0x0e, 0x16, 0xee, 0xaa, 0xc5, 0xec, 0x51, 0xac, 0x86, 0xfe, 0xbf, 0x24, 0x09, 0x54,
                    0x39, 0x9e, 0xc6, 0xc7, 0xe6, 0xbf, 0x87, 0xc9, 0xd3, 0x47, 0x3e, 0x33, 0x19, 0x7a, 0x93, 0xc9,
                    0x09, 0x92, 0xab, 0xc5, 0x2d, 0x82, 0x2c, 0x37, 0x06, 0x47, 0x69, 0x83, 0x28, 0x4a, 0x05, 0x04,
                    0x35, 0x17, 0x45, 0x4c, 0xa2, 0x3c, 0x4a, 0xf3, 0x88, 0x86, 0x56, 0x4d, 0x3a, 0x14, 0xd4, 0x93},

            {0x9b, 0x1f, 0x5b, 0x42, 0x4d, 0x93, 0xc9, 0xa7, 0x03, 0xe7, 0xaa, 0x02, 0x0c, 0x6e, 0x41, 0x41,
                    0x4e, 0xb7, 0xf8, 0x71, 0x9c, 0x36, 0xde, 0x1e, 0x89, 0xb4, 0x44, 0x3b, 0x4d, 0xdb, 0xc4, 0x9a,
                    0xf4, 0x89, 0x2b, 0xcb, 0x92, 0x9b, 0x06, 0x90, 0x69, 0xd1, 0x8d, 0x2b, 0xd1, 0xa5, 0xc4, 0x2f,
                    0x36, 0xac, 0xc2, 0x35, 0x59, 0x51, 0xa8, 0xd9, 0xa4, 0x7f, 0x0d, 0xd4, 0xbf, 0x02, 0xe7, 0x1e},

            {0x37, 0x8f, 0x5a, 0x54, 0x16, 0x31, 0x22, 0x9b, 0x94, 0x4c, 0x9a, 0xd8, 0xec, 0x16, 0x5f, 0xde,
                    0x3a, 0x7d, 0x3a, 0x1b, 0x25, 0x89, 0x42, 0x24, 0x3c, 0xd9, 0x55, 0xb7, 0xe0, 0x0d, 0x09, 0x84,
                    0x80, 0x0a, 0x44, 0x0b, 0xdb, 0xb2, 0xce, 0xb1, 0x7b, 0x2b, 0x8a, 0x9a, 0xa6, 0x07, 0x9c, 0x54,
                    0x0e, 0x38, 0xdc, 0x92, 0xcb, 0x1f, 0x2a, 0x60, 0x72, 0x61, 0x44, 0x51, 0x83, 0x23, 0x5a, 0xdb},

            {0xab, 0xbe, 0xde, 0xa6, 0x80, 0x05, 0x6f, 0x52, 0x38, 0x2a, 0xe5, 0x48, 0xb2, 0xe4, 0xf3, 0xf3,
                    0x89, 0x41, 0xe7, 0x1c, 0xff, 0x8a, 0x78, 0xdb, 0x1f, 0xff, 0xe1, 0x8a, 0x1b, 0x33, 0x61, 0x03,
                    0x9f, 0xe7, 0x67, 0x02, 0xaf, 0x69, 0x33, 0x4b, 0x7a, 0x1e, 0x6c, 0x30, 0x3b, 0x76, 0x52, 0xf4,
                    0x36, 0x98, 0xfa, 0xd1, 0x15, 0x3b, 0xb6, 0xc3, 0x74, 0xb4, 0xc7, 0xfb, 0x98, 0x45, 0x9c, 0xed},

            {0x7b, 0xcd, 0x9e, 0xd0, 0xef, 0xc8, 0x89, 0xfb, 0x30, 0x02, 0xc6, 0xcd, 0x63, 0x5a, 0xfe, 0x94,
                    0xd8, 0xfa, 0x6b, 0xbb, 0xeb, 0xab, 0x07, 0x61, 0x20, 0x01, 0x80, 0x21, 0x14, 0x84, 0x66, 0x79,
                    0x8a, 0x1d, 0x71, 0xef, 0xea, 0x48, 0xb9, 0xca, 0xef, 0xba, 0xcd, 0x1d, 0x7d, 0x47, 0x6e, 0x98,
                    0xde, 0xa2, 0x59, 0x4a, 0xc0, 0x6f, 0xd8, 0x5d, 0x6b, 0xca, 0xa4, 0xcd, 0x81, 0xf3, 0x2d, 0x1b},

            {0x37, 0x8e, 0xe7, 0x67, 0xf1, 0x16, 0x31, 0xba, 0xd2, 0x13, 0x80, 0xb0, 0x04, 0x49, 0xb1, 0x7a,
                    0xcd, 0xa4, 0x3c, 0x32, 0xbc, 0xdf, 0x1d, 0x77, 0xf8, 0x20, 0x12, 0xd4, 0x30, 0x21, 0x9f, 0x9b,
                    0x5d, 0x80, 0xef, 0x9d, 0x18, 0x91, 0xcc, 0x86, 0xe7, 0x1d, 0xa4, 0xaa, 0x88, 0xe1, 0x28, 0x52,
                    0xfa, 0xf4, 0x17, 0xd5, 0xd9, 0xb2, 0x1b, 0x99, 0x48, 0xbc, 0x92, 0x4a, 0xf1, 0x1b, 0xd7, 0x20}
    };

    //конструктор
    public Gost3411(int sizeOfHash){
        this._iv = new int[C_64];
        this._n =  new int[C_64];
        this._sigma = new int[C_64];
        for(int i=0; i<C_64; i++){
            this._iv[i] = 0x00;
            this._n[i] = 0x00;
            this._sigma[i] = 0x00;
        }
        this.outLength = sizeOfHash;
        if(sizeOfHash == 256){
            for(int i=0; i<C_64; i++){
                this._iv[i] = 0x01;
            }
        }else if(sizeOfHash != 512){
            System.out.println("Ошибка выбора длины ключа!");
        }
    }

    //копирует массив source[] в массив destination[] с позиции sourceIndex в позицию destinationIndex длиной length
    private int[] arrayCopy(int[] source, int sourceIndex, int[] destination,int destinationIndex, int length){
        int[] result = destination;
        for(int i=0; i<length; i++){
            result[destinationIndex+i] = source[sourceIndex+i];
        }
        return result;
    }

    //массив int array[] переводит в массив битов
    private boolean[] arrayIntToBitArray(int[] array){
        int sz = array.length;
        boolean[] result = new boolean[sz*8];
        for(int i = 0 ; i<sz*8; i++){
            result[i] = false;
        }
        for(int j = 0; j<sz; j++){
            for(int i = 0; i<8; i++){
                boolean flag = (array[j] & (1<<i)) != 0;
                result[j*8+i] = flag;
            }
        }
        return result;
    }

    //инверсия массива для int
    private int[] arrayReverseInt(int[] array){
        int sz = array.length;
        int[] result = new int[sz];
        int temp;
        for(int i=0; i<=sz/2; i++){
            temp = array[sz-i-1];
            result[sz-i-1] = array[i];
            result[i] = temp;
        }
        return result;
    }

    //инверсия массива для boolean
    private boolean[] arrayReverseBoolean(boolean[] array){
        int sz = array.length;
        boolean[] result = new boolean[sz];
        boolean temp;
        for(int i=0; i<sz/2; i++){
            temp = array[sz-i-1];
            result[sz-i-1] = array[i];
            result[i] = temp;
        }
        return result;
    }

    //сложение по модулю 2
    private int[] xor512(int[] k, int[] a){
        int[] result = new int[C_64];
        for(int i = 0; i<C_64; i++){
            result[i] = k[i] ^ a[i];
        }
        return result;
    }

    //сложение по 2^512
    private int[] addByMod512(int[] a, int[] b){
        int[] result = new int[C_64];
        int temp = 0;
        for(int i=C_64-1; i>=0; i--){
            temp = a[i] + b[i] + (temp >> 8);
            result[i] = (temp&0xFF);
        }
        return result;
    }

    //функция подстановки S
    private int[] sIteration(int[] a){
        int[] result = new int[C_64];
        for(int i=0; i<C_64; i++){
            result[i] = PI_CONST[a[i]];
        }
        return result;
    }

    //функция перестановки P
    private int[] pIteration(int[] a){
        int[] result = new int[C_64];
        for(int i=0; i<C_64; i++){
            result[i] = a[TAU_CONST[i]];
        }
        return result;
    }

    //функция L - преобразования
    private int[] lIteration(int[] a){
        int[] result = new int[C_64];
        int[] t = new int[8];
        for(int u=0;u<64;u++){
            result[u] = 0x00;
        }
        for(int i = 0; i < 8; i++){
            for(int r = 0; r<8; r++){
                t[r] = 0x00;
            }
            int[] tempArray = new int[8];
            tempArray = arrayCopy(a, i * 8, tempArray, 0, 8);
            tempArray = arrayReverseInt(tempArray);
            boolean[] boolArray = arrayReverseBoolean(arrayIntToBitArray(tempArray));
            for(int j = 0; j<64; j++){
                if(boolArray[j] != false){
                    for(int y = 0; y<8; y++){
                        t[y] = t[y] ^ L_CONST[j*8 + y];
                    }
                }
            }
            int[] resPart = t;
            result = arrayCopy(resPart, 0, result, i*8, 8);
        }
        return result;
    }

    //след ключ
    private int[] keyNext(int[] k, int i){
        k = xor512(k, C_CONST[i]);
        k = sIteration(k);
        k = pIteration(k);
        k = lIteration(k);
        return k;
    }

    //E(k,m)
    private int[] eIteration(int[] k, int[] m){
        int[] result = xor512(k, m);
        for(int i=0; i<12; i++){
            result = sIteration(result);
            result = pIteration(result);
            result = lIteration(result);
            k = keyNext(k, i);
            result = xor512(result, k);
        }
        return result;
    }

    //функция сжатия
    private int[] g_N(int[] n, int[] m, int[] h){
        int[] k = xor512(h, n);
        k = sIteration(k);
        k = pIteration(k);
        k = lIteration(k);
        int[] t = eIteration(k, m);
        t = xor512(h, t);
        return xor512(t, m);
    }

    //слепое копирование массива source заданноой размерности
    private int[] arrayBlindCopy(int[] source, int dimension){
        int i =0;
        int[] result = new int[dimension];
        for(int j=dimension-1;j>=0;j--){
            result[j] = 0x00;
        }
        while(--dimension >= 0){
            result[i++] = source[dimension];
        }
        return result;
    }

    //
    public int[] getHash(int[] message)
    {
        int[] readyMessage = new int[64];
        int lengthOfMessage = message.length * 8;
        int[] h;
        h = this._iv;
        int[] n = this._n;
        int[] sigma = this._sigma;

        int[] n_0 ={
                0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
        };

        int[] n_512 ={
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,512
        };

        int inc = 0;
        while (lengthOfMessage >= 512)
        {
            inc++;
            int[] tempMessage = new int[64];
            tempMessage = arrayCopy(message, message.length - 64, tempMessage, 0, 64);
            h=g_N(n, tempMessage, h);
            n = addByMod512(n, n_512);
            sigma = addByMod512(sigma, tempMessage);
            lengthOfMessage -= 512;
        }

        int[] g_HMessage;
        g_HMessage = arrayBlindCopy(message, message.length - inc * 64);
        g_HMessage = arrayReverseInt(g_HMessage);

        if (g_HMessage.length < 64)
        {
            for (int i = 0; i < (64 - g_HMessage.length - 1); i++)
            {
                readyMessage[i] = 0;
            }
            readyMessage = arrayCopy(g_HMessage, 0, readyMessage, 64 - g_HMessage.length, g_HMessage.length);
            readyMessage[64 - g_HMessage.length - 1] = 0x01;
        }
        h=g_N(n, readyMessage, h);

        int[] absLengthMessage ={
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,g_HMessage.length * 8
        };

        n = addByMod512(n, absLengthMessage);
        sigma = addByMod512(sigma, readyMessage);
        h = g_N(n_0, n, h);
        h = g_N(n_0, sigma, h);
        if (outLength == 512)
            return h;
        else
        {
            int[] h256 = new int[32];
            h256 = arrayCopy(h, 0, h256, 0, 32);
            return h256;
        }
    }
}